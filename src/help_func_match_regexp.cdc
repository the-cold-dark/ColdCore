
new object $help_func_match_regexp: $help_funcs_str;

var $has_name name = ['prop, "match_regexp()", "match_regexp()"];
var $help_node body = <$ctext_frob, [[<$format, ["dfn", [], [<$format, ["tt", [], [<$format, ["i", [], ["LIST"], 'do_i]>, " match_regexp(", <$format, ["i", [], ["STRING str"], 'do_i]>, ", ", <$format, ["i", [], ["STRING regexp"], 'do_i]>, "[, ", <$format, ["i", [], ["INTEGER cs"], 'do_i]>, "])"], 'do_tt]>], 'do_dfn]>, <$format, ["p", [], [], 'do_p]>, "This function matches the regular expression argument ", <$format, ["i", [], ["regexp"], 'do_i]>, " against the argument ", <$format, ["i", [], ["str"], 'do_i]>, ". If ", <$format, ["i", [], ["cs"], 'do_i]>, " is specified and is true, the match is case-sensitive; otherwise, it is case-insensitive. If the match succeeds, ", <$format, ["tt", [], ["match_regexp()"], 'do_tt]>, " returns a ten-element list giving the substitutions for the match (see below); otherwise, ", <$format, ["tt", [], ["match_regexp()"], 'do_tt]>, " returns 0. If the argument ", <$format, ["i", [], ["regexp"], 'do_i]>, " is not a valid regular expression, the error ", <$format, ["tt", [], ["~regexp"], 'do_tt]>, " is thrown. ", <$format, ["np", [], [], 'do_np]>, "This function is often used when all that is desired is whether a match was made or not. The function ", <$format, ["tt", [], [<$format, ["link", [["node", "$help_func_regexp"]], ["regexp()"], 'do_link]>], 'do_tt]>, " is better for handling the full results of a regexp match. For more information on ColdC Regular Expressions see the section ", <$format, ["link", [["node", "$help_func_regexp"]], ["ColdC Regular Expressions"], 'do_link]>, ". ", <$format, ["np", [], [], 'do_np]>, "The substitutions are the text in ", <$format, ["i", [], ["str"], 'do_i]>, " which matches the parenthesized subexpressions in ", <$format, ["i", [], ["regexp"], 'do_i]>, ". The first substitution is the text in ", <$format, ["i", [], ["str"], 'do_i]>, " which matches the whole regexp. Thus, a regular expression can contain no more than nine parenthesized subexpressions. Substitutions are returned as two-element lists ", <$format, ["tt", [], [<$format, ["i", [], ["[start, len]"], 'do_i]>], 'do_tt]>, " giving the index of the matching text in ", <$format, ["i", [], ["str"], 'do_i]>, " and the length of the text. ", <$format, ["np", [], [], 'do_np]>, "Examples:", <$format, ["p", [], [], 'do_p]>, <$format, ["dfn", [], ["match_regexp(\"fooBAR\", \"bar\")", <$format, ["br", [], [], 'do_br]>, "=> [[4, 3], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]"], 'do_dfn]>, " ", <$format, ["dfn", [], ["match_regexp(\"Greg says, 'Hello.'\", \"^([^ ]+) says, '(.*)'$\")", <$format, ["br", [], [], 'do_br]>, "=> [[1, 19], [1, 4], [13, 6], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]"], 'do_dfn]>, " ", <$format, ["dfn", [], ["match_regexp(\" 300 100 200 \", \"[0-9]+\")", <$format, ["br", [], [], 'do_br]>, "=> [[2, 3], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]"], 'do_dfn]>, " ", <$format, ["dfn", [], ["match_regexp(\"foo\", \"bar\")", <$format, ["br", [], [], 'do_br]>, "=> 0"], 'do_dfn]>, " ", <$format, ["dfn", [], ["match_regexp(\"Foo\", \"foo\", 1)", <$format, ["br", [], [], 'do_br]>, "=> 0"], 'do_dfn]>], #[['this, $help_func_match_regexp]]]>;
var $help_node index = $help_index_function;
var $help_node links = #[["regexp()", $help_func_regexp], ["ColdC Regular Expressions", $help_func_regexp]];
var $help_node nolist = 0;
var $root created_on = 855384457;
var $root flags = ['variables, 'methods, 'code, 'core];
var $root inited = 1;
var $root managed = [$help_func_match_regexp];
var $root manager = $help_func_match_regexp;


