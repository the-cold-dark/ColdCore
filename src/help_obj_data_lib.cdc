
new object $help_obj_data_lib: $help_obj;

var $dmi_data descriptions = #[];
var $has_name name = ['prop, "Data Lib", "Data Lib"];
var $help_node body = <$ctext_frob, [[<$format, ["dl", [], [<$format, ["dt", [], [".", <$format, ["method", [["data_lib.unparse_indent", 1]], ["unparse_indent"], 'do_method]>, "(", <$format, ["var", [], ["value"], 'do_var]>, ")"], 'do_dt]>, <$format, ["dd", [], ["Accepts a ", <$format, ["link", [["node", "$help_coldc_types"]], ["valid ColdC data"], 'do_link]>, " item as an argument, and returns a textual representation similar to the result of a ", <$format, ["link", [["node", "$help_func_toliteral"]], ["toliteral"], 'do_link]>, "() call, except in a more driver-friendly manner."], 'do_dd]>, <$format, ["dt", [], [".", <$format, ["method", [["data_lib.unparse_indent_html", 1]], ["unparse_indent_html"], 'do_method]>, "(", <$format, ["var", [], ["value"], 'do_var]>, ")"], 'do_dt]>, <$format, ["dd", [], ["Accepts a ", <$format, ["link", [["node", "$help_coldc_types"]], ["valid ColdC data"], 'do_link]>, " item as an argument and calls .", <$format, ["method", [["data_lib.unparse_indent", 1]], ["unparse_indent"], 'do_method]>, "() with it. It then post-processes the data converting it to HTML. Conversions performed are converting various characters to the valid HTML entity and linking objects the web view of them via /bin/display."], 'do_dd]>, <$format, ["dt", [], [".", <$format, ["method", [["data_lib.data_map", 1]], ["data_map"], 'do_method]>, "(", <$format, ["var", [], ["val"], 'do_var]>, ", ", <$format, ["var", [], ["method"], 'do_var]>, ", ", <$format, ["var", [], ["options"], 'do_var]>, "[, ", <$format, ["var", [], ["@args"], 'do_var]>, "])"], 'do_dt]>, <$format, ["dd", [], ["Maps a method over elements of any data structure. You can use it to map a function inside a list on a frob, for instance. Options decide which data types and frob classes will be affected and which will be left alone. Options is a dict of [key, value] pairs."], 'do_dd]>, <$format, ["dl", [["columned", 1]], [<$format, ["dt", [], ["['object, something]"], 'do_dt]>, <$format, ["dd", [], ["If its an object, it calls the method from that object, otherwise it calls it from data value."], 'do_dd]>, <$format, ["dt", [], ["['list,1]"], 'do_dt]>, <$format, ["dd", [], ["Map into lists."], 'do_dd]>, <$format, ["dt", [], ["['dictionary,1]"], 'do_dt]>, <$format, ["dd", [], ["Map into dicts."], 'do_dd]>, <$format, ["dt", [], ["['frob,1]"], 'do_dt]>, <$format, ["dd", [], ["Map into frobs. You must use the option 'class to specify the class to affect."], 'do_dd]>, <$format, ["dt", [], ["['all,1]"], 'do_dt]>, <$format, ["dd", [], ["Affect all types."], 'do_dd]>, <$format, ["dt", [], ["[type, 1]"], 'do_dt]>, <$format, ["dd", [], ["Affect the types not mentioned above."], 'do_dd]>], 'do_dl]>, <$format, ["dt", [], [".", <$format, ["method", [["data_lib.is_valid_type", 1]], ["is_valid_type"], 'do_method]>, "(", <$format, ["var", [], ["type"], 'do_var]>, ")"], 'do_dt]>, <$format, ["dd", [], ["Given a ", <$format, ["link", [["node", "$help_coldc_types_symbols"]], ["symbol"], 'do_link]>, ", returns true if it is a ", <$format, ["link", [["node", "$help_coldc_types"]], ["valid ColdC type"], 'do_link]>, ", false if not."], 'do_dd]>], 'do_dl]>], #[['links, #[["valid ColdC data", "$help_coldc_types"], ["toliteral", "$help_func_toliteral"], ["symbol", "$help_coldc_types_symbols"], ["valid ColdC type", "$help_coldc_types"]]]]]>;
var $help_node index = $help_index_objects;
var $help_node links = #[["valid ColdC data", $help_coldc_types], ["toliteral", $help_func_toliteral], ["symbol", $help_coldc_types_symbols], ["valid ColdC type", $help_coldc_types]];
var $root created_on = 870208061;
var $root flags = ['variables, 'methods, 'code, 'core];
var $root inited = 1;
var $root managed = [$help_obj_data_lib];
var $root manager = $help_obj_data_lib;


