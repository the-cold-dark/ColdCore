
new object $help_coldc_arith: $help_coldc_ops;

var $has_name name = ['prop, "Arithmetic Operators", "Arithmetic Operators"];
var $help_node body = <$ctext_frob, [[<$format, ["p", [], [], 'do_p]>, "ColdC provides several operators for performing arithmetic operations. These operators apply primarily to integers and floats, but some of them may be used with non-integer data for easier formatting and manipulation. If any arithmetic operator is used with inappropriate data the error ", <$format, ["tt", [], ["~type"], 'do_tt]>, " is thrown. ", <$format, ["np", [], [], 'do_np]>, "If both sides of a binary arithmetic expression are integers, the result will always be an integer, even if the result would have floating precision. If one side of the expression is a float, the result will always be a float. For instance, ", <$format, ["tt", [], ["3 / 2"], 'do_tt]>, " (both integers) would result in ", <$format, ["tt", [], ["1"], 'do_tt]>, ", whereas ", <$format, ["tt", [], ["3 / 2.0"], 'do_tt]>, " would result in ", <$format, ["tt", [], ["1.500000"], 'do_tt]>, ". ", <$format, ["np", [], [], 'do_np]>, "The arithmetic operators are: ", <$format, ["dfn", [], [<$format, ["table", [["cols", "10%,20%,15%"]], [<$format, ["tr", [], [<$format, ["td", [], [<$format, ["tt", [], ["+"], 'do_tt]>], 'do_td]>, <$format, ["td", [], ["ignored"], 'do_td]>, <$format, ["td", [], ["(unary)"], 'do_td]>], 'do_tr]>, <$format, ["tr", [], [<$format, ["td", [], [<$format, ["tt", [], ["-"], 'do_tt]>], 'do_td]>, <$format, ["td", [], ["negate"], 'do_td]>, <$format, ["td", [], ["(unary)"], 'do_td]>], 'do_tr]>, <$format, ["tr", [], [<$format, ["td", [], [<$format, ["tt", [], ["+"], 'do_tt]>], 'do_td]>, <$format, ["td", [], ["addition"], 'do_td]>, <$format, ["td", [], ["(binary)"], 'do_td]>], 'do_tr]>, <$format, ["tr", [], [<$format, ["td", [], [<$format, ["tt", [], ["-"], 'do_tt]>], 'do_td]>, <$format, ["td", [], ["subtraction"], 'do_td]>, <$format, ["td", [], ["(binary)"], 'do_td]>], 'do_tr]>, <$format, ["tr", [], [<$format, ["td", [], [<$format, ["tt", [], ["*"], 'do_tt]>], 'do_td]>, <$format, ["td", [], ["multiply"], 'do_td]>, <$format, ["td", [], ["(binary)"], 'do_td]>], 'do_tr]>, <$format, ["tr", [], [<$format, ["td", [], [<$format, ["tt", [], ["/"], 'do_tt]>], 'do_td]>, <$format, ["td", [], ["divide"], 'do_td]>, <$format, ["td", [], ["(binary)"], 'do_td]>], 'do_tr]>, <$format, ["tr", [], [<$format, ["td", [], [<$format, ["tt", [], ["%"], 'do_tt]>], 'do_td]>, <$format, ["td", [], ["modulo"], 'do_td]>, <$format, ["td", [], ["(binary)"], 'do_td]>], 'do_tr]>, <$format, ["tr", [], [<$format, ["td", [], [<$format, ["tt", [], ["++"], 'do_tt]>], 'do_td]>, <$format, ["td", [], ["increment"], 'do_td]>, <$format, ["td", [], ["(unary)"], 'do_td]>], 'do_tr]>, <$format, ["tr", [], [<$format, ["td", [], [<$format, ["tt", [], ["--"], 'do_tt]>], 'do_td]>, <$format, ["td", [], ["decrement"], 'do_td]>, <$format, ["td", [], ["(unary)"], 'do_td]>], 'do_tr]>], 'do_table]>], 'do_dfn]>, <$format, ["p", [], [], 'do_p]>, "The unary ", <$format, ["tt", [], ["-"], 'do_tt]>, " operator negates the numeric value (reverses its positive/negative value). The unary ", <$format, ["tt", [], ["+"], 'do_tt]>, " operator has no effect on its argument, and is provided simply for completeness. The binary operators ", <$format, ["tt", [], ["+"], 'do_tt]>, " and ", <$format, ["tt", [], ["-"], 'do_tt]>, " add and subtract their arguments. ", <$format, ["np", [], [], 'do_np]>, "The binary multiplication operator ", <$format, ["tt", [], ["*"], 'do_tt]>, " multiplies the left argument by the right argument. The binary division operator ", <$format, ["tt", [], ["/"], 'do_tt]>, " divides the left argument by the right argument, returning the whole result. The binary modulus operator ", <$format, ["tt", [], ["%"], 'do_tt]>, " divides the left argument by the right argument and returns the remainder result. ", <$format, ["np", [], [], 'do_np]>, "The unary Increment and Decrement operators serve a dual function, and are explained further in their own section.", <$format, ["p", [], [], 'do_p]>, <$format, ["ul", [], [<$format, ["li", [], [<$format, ["link", [["node", "$help_coldc_incdec"]], ["Increment / Decrement Operators"], 'do_link]>], 'do_li]>, <$format, ["li", [], [<$format, ["link", [["node", "$help_coldc_non_arith"]], ["Non-Numeric Use"], 'do_link]>], 'do_li]>], 'do_ul]>], #[['this, $help_coldc_arith]]]>;
var $help_node index = $help_index_driver;
var $help_node links = #[["Increment / Decrement Operators", $help_coldc_incdec], ["Non-Numeric Use", $help_coldc_non_arith]];
var $help_node nolist = 0;
var $root created_on = 853827084;
var $root flags = ['variables, 'methods, 'code, 'core];
var $root inited = 1;
var $root managed = [$help_coldc_arith];
var $root manager = $help_coldc_arith;


