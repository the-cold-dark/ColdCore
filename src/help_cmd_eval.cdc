
new object $help_cmd_eval: $help_cmds;

var $dmi_data descriptions = #[];
var $has_name name = ['prop, "@eval", "@eval"];
var $help_node body = <$ctext_frob, [[<$format, ["p", [], [], 'do_p]>, <$format, ["b", [], ["PROGRAMMER COMMAND"], 'do_b]>, <$format, ["p", [], [], 'do_p]>, <$format, ["dfn", [], ["Syntax: ", <$format, ["tt", [], ["@eval [<code>]"], 'do_tt]>], 'do_dfn]>, <$format, ["p", [], [], 'do_p]>, "This command is a powerful tool given to programmers. Its primary function is to allow programmers to execute ColdC code without actually programming it as a method. Anything specified in <code> is compiled and executed immediately. Furthermore, it also provides profiling and debugging tools, and an alternate feature that will show the interpreter opcodes it becomes, rather than executing it. ", <$format, ["np", [], [], 'do_np]>, "The shortcut ", <$format, ["tt", [], [";"], 'do_tt]>, " can also be used in place of ", <$format, ["tt", [], ["@eval"], 'do_tt]>, ". ", <$format, ["np", [], [], 'do_np]>, <$format, ["b", [], ["Example:"], 'do_b]>, " ", <$format, ["dfn", [], [<$format, ["quote", [], [">; .location().announce(\"Testing.\")\nTesting.\n=> $courtyard (the Courtyard)\n[ seconds: 1.1022141; operations: 1506 (1506 ticks per second) ]\n"], 'do_quote]>], 'do_dfn]>, <$format, ["p", [], [], 'do_p]>, "In this example, the .location() gives us the object name of where we currently are ($courtyard). The .announce() says that this location should announce to all the players in this location our message (\"Testing.\"). If the code executes correctly, our message is displayed to everybody, and the @eval command returns the result of the expression, as well as the amount of time, operations, and ticks per second it took to perform the execution. Note: when measuring performance, the actual time it takes to execute is more important than the number of operations (because this is an interpreted language, different operations can be faster than the others, so the actual count is not a true representation of performance). ", <$format, ["subj", [["level", "2"]], ["Execution Environment"], 'do_subj]>, <$format, ["p", [], [], 'do_p]>, "By default, @eval will assume the code you are specifying is an expression, and will prefix it with '", <$format, ["tt", [], ["return"], 'do_tt]>, "', so the value of the expression is returned. This is a problem if your code is a statement, instead of an expression (such as a looping statement). To avoid this you can define variables, or include 'return' in your code where it should be--and @eval will not prefix it. ", <$format, ["np", [], [], 'do_np]>, "Furthermore, @eval defines a set of variables which can be used by the ColdC code. These are: ", <$format, ["tt", [], ["me"], 'do_tt]>, " and ", <$format, ["tt", [], ["here"], 'do_tt]>, ", representing your own object and your current location, respectively. ", <$format, ["subj", [["level", "2"]], ["Environment Substitution"], 'do_subj]>, <$format, ["p", [], [], 'do_p]>, "Anywhere within the ColdC code (other than inside strings) you can use the carat character (", <$format, ["tt", [], ["^"], 'do_tt]>, ") followed by a string token of alphanumeric characters. If @eval finds this, it will try to match the token as a name against objects in your environment. If a match is found it will replace that token with the dbref for that object. ", <$format, ["subj", [["level", "2"]], ["Execution Flags"], 'do_subj]>, <$format, ["p", [], [], 'do_p]>, "One of the following flags can be defined before the ColdC code (seperated with a semi-colon), which will change the execution behaviour: ", <$format, ["tt", [], ["trace"], 'do_tt]>, ", ", <$format, ["tt", [], ["debug"], 'do_tt]>, ", ", <$format, ["tt", [], ["profile"], 'do_tt]>, " or ", <$format, ["tt", [], ["opcodes"], 'do_tt]>, ". ", <$format, ["np", [], [], 'do_np]>, "If ", <$format, ["tt", [], ["trace"], 'do_tt]>, " is defined, a trace of all method calls made during the execution will be printed after execution is complete--along with the tick number they were made at. If ", <$format, ["tt", [], ["debug"], 'do_tt]>, " is defined, the output is similar to ", <$format, ["tt", [], ["trace"], 'do_tt]>, " but the tick number of the return statement is also included. If ", <$format, ["tt", [], ["profile"], 'do_tt]>, " is defined, a breakdown of all method calls is provided, along with the number of ticks consumed by the method--sorted by the largest first. If ", <$format, ["tt", [], ["opcodes"], 'do_tt]>, " is defined, the code will not actually execute, but instead will return the interpreter's opcodes for the method."], #[]]>;
var $help_node index = $help_index_cmds;
var $help_node links = #[];
var $root created_on = 870647020;
var $root flags = ['variables, 'methods, 'code, 'core];
var $root inited = 1;
var $root managed = [$help_cmd_eval];
var $root manager = $help_cmd_eval;


