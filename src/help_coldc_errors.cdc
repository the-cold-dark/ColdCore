
new object $help_coldc_errors: $help_coldc_imp;

var $has_name name = ['prop, "Errors", "Errors"];
var $help_node body = <$ctext_frob, [[<$format, ["p", [], [], 'do_p]>, "When something goes wrong in a ", <$format, ["tt", [], ["ColdC"], 'do_tt]>, " method an error is thrown. The interpreter will throw errors, and methods can throw custom errors (using the ", <$format, ["tt", [], [<$format, ["link", [["node", "$help_func_throw"]], ["throw()"], 'do_link]>], 'do_tt]>, " function). An error consists of an error code (the ", <$format, ["i", [], ["type"], 'do_i]>, " of error), a string describing the error, and--optionally--data relative to the error. ", <$format, ["np", [], [], 'do_np]>, "When the interpreter throws an error, it checks to see how the current method handles that error type. If the error occurred in a critical expression (see ", <$format, ["link", [["node", "$help_coldc_err_expr"]], ["Error-Handling Expressions"], 'do_link]>, "), then the interpreter will cease evaluating the critical expression. Processing of the method will continue as if the interpreter had completed evaluation of the critical expression. The return value of the critical expression will be the error code associated with the thrown error. In this case, the traceback is not accessible from ", <$format, ["tt", [], [<$format, ["link", [["node", "$help_func_traceback"]], ["traceback()"], 'do_link]>], 'do_tt]>, "; in order to get a traceback, a ", <$format, ["tt", [], [<$format, ["link", [["node", "$help_coldc_err_stmts"]], ["catch statement"], 'do_link]>], 'do_tt]>, " must be used. ", <$format, ["np", [], [], 'do_np]>, "If the error did not occur in a critical expression, but occurred in a catch statement which catches the error code (either because it is a ", <$format, ["tt", [], ["catch all"], 'do_tt]>, " statement or because it lists the error code (see ", <$format, ["link", [["node", "$help_coldc_err_stmts"]], ["Error-Handling Statements"], 'do_link]>, "). Then the processing of the method jumps to the error handler, if one was provided, or to the end of the catch statement if not. ", <$format, ["np", [], [], 'do_np]>, "If the error did not occur in a critical expression or in an appropriate catch statement, then the current method aborts, and the interpreter throws an error in the calling method. Normally, the error thrown in the calling routine will have the error code ", <$format, ["tt", [], ["~methoderr"], 'do_tt]>, " unless the original error occurred within a ", <$format, ["link", [["node", "$help_coldc_err_expr"]], ["propagation expression"], 'do_link]>, ". If the error occurred within a propagation expression then the error code will be the same as it was for the original error. A propagation expression has no effect on how an error is handled except to cause the error code to propagate differently to the calling routine. ", <$format, ["np", [], [], 'do_np]>, "Errors are thrown using the ", <$format, ["tt", [], [<$format, ["link", [["node", "$help_func_throw"]], ["throw()"], 'do_link]>], 'do_tt]>, " function. This does not throw an error in the current method; instead, it exits the current method and throws an error in the calling method. Thus a method cannot ignore an error which it threw itself using ", <$format, ["tt", [], ["throw()"], 'do_tt]>, ". ", <$format, ["np", [], [], 'do_np]>, "There is one case in which a method cannot catch an interpreter-generated error. Methods have a limited amount of time to run, measured in ", <$format, ["i", [], ["ticks"], 'do_i]>, ". A method will generally only run out of ticks if it gets stuck in an infinite loop. If a method runs out of ticks, then the interpreter will throw a ", <$format, ["tt", [], ["~ticks"], 'do_tt]>, " error, which the method cannot catch. This causes the method to abort, which in turn causes the interpreter to throw a ", <$format, ["tt", [], ["~methoderr"], 'do_tt]>, " error in the calling routine. ", <$format, ["np", [], [], 'do_np]>, "Critical expressions should be used when calling code which is possibly buggy or when the method may be undefined, and it is undesirable for the current method to stop executing as a result. For instance, a method which announces a string to every object in a container should probably ignore errors in the methods for each individual object which handle receiving the string. ", <$format, ["np", [], [], 'do_np]>, "Catch statements should be used to handle errors in any way other than ignoring them. The catch statement is much more powerful than the critical expression, and is ideal for situations in which fine-grain control over error handling is required. ", <$format, ["np", [], [], 'do_np]>, "Propagation expressions should be used when the current method is an intermediary between an outside object and an internal feature. For instance, a method which checks permissions and calls an object function such as ", <$format, ["tt", [], ["list_method()"], 'do_tt]>, " is acting as an intermediary. In this case, the method should throw the same errors as the ", <$format, ["tt", [], ["list_method()"], 'do_tt]>, " function, so the function call should be enclosed within a propagation expression."], #[['this, $help_coldc_errors]]]>;
var $help_node index = $help_index_driver;
var $help_node links = #[["throw()", $help_func_throw], ["Error-Handling Expressions", $help_coldc_err_expr], ["traceback()", $help_func_traceback], ["catch statement", $help_coldc_err_stmts], ["Error-Handling Statements", $help_coldc_err_stmts], ["propagation expression", $help_coldc_err_expr]];
var $help_node nolist = 0;
var $root created_on = 854058064;
var $root flags = ['variables, 'methods, 'code, 'core];
var $root inited = 1;
var $root managed = [$help_coldc_errors];
var $root manager = $help_coldc_errors;


